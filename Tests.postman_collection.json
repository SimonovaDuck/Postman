{
	"info": {
		"_postman_id": "af64aee9-f372-42f8-af3c-8765a56dde92",
		"name": "Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33422665"
	},
	"item": [
		{
			"name": "https://www.cbr-xml-daily.ru/daily_json.js",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Проверка соединения с API",
							"pm.test(\"Подсоединение выполнено\", function () {",
							"    pm.response.to.be.ok; // Проверяем, что ответ от API не равен null или undefined",
							"});",
							"",
							"// Проверка кода состояния HTTP (работает)",
							"pm.test(\"Статус 200\", function () {",
							"    pm.response.to.have.status(200); // Проверяем, что код состояния HTTP равен 200",
							"});",
							"",
							"// Проверка формата ответа (формат JSON)",
							"pm.test(\"Ответ имеет формат в JSON\", function () {",
							"    pm.response.to.have.jsonBody(); // Проверяем, что ответ имеет формат JSON",
							"});",
							"",
							"",
							"// Проверка формата ответа (xml) (провалится)",
							"pm.test(\"Ответ имеет формат в XML\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/xml\"); // Проверяем заголовок Content-Type на наличие значения \"application/xml\"",
							"    pm.expect(pm.responseBody).to.include(\"<?xml\"); // Проверяем, что ответ содержит начало XML-документа",
							"});",
							"",
							"",
							"// Проверка наличия ожидаемых полей в ответе",
							"pm.test(\"Должна быть информация о курсах для каждой валюты\", function () {",
							"    var jsonData = pm.response.json(); // Получаем JSON данные из ответа",
							"",
							"    // Проверяем наличие поля \"Valute\" в ответе",
							"    pm.expect(jsonData).to.have.property('Valute');",
							"",
							"    var valute = jsonData.Valute; // Получаем объект Valute из данных",
							"",
							"    // Проверяем наличие ожидаемых полей для каждой валюты",
							"    for (var currency in valute) {",
							"        pm.expect(valute[currency]).to.have.property('ID');",
							"        pm.expect(valute[currency]).to.have.property('NumCode');",
							"        pm.expect(valute[currency]).to.have.property('CharCode');",
							"        pm.expect(valute[currency]).to.have.property('Nominal');",
							"        pm.expect(valute[currency]).to.have.property('Name');",
							"        pm.expect(valute[currency]).to.have.property('Value');",
							"        pm.expect(valute[currency]).to.have.property('Previous');",
							"    }",
							"});",
							"",
							"",
							"// Проверка наличия полей \"Date\", \"PreviousDate\", \"PreviousURL\" и \"Timestamp\" в ответе",
							"pm.test(\"Проверка наличия полей\", function () {",
							"    var jsonData = pm.response.json(); // Получаем JSON данные из ответа",
							"",
							"    // Проверяем наличие каждого из полей в JSON объекте",
							"    pm.expect(jsonData).to.have.property(\"Date\");",
							"    pm.expect(jsonData).to.have.property(\"PreviousDate\");",
							"    pm.expect(jsonData).to.have.property(\"PreviousURL\");",
							"    pm.expect(jsonData).to.have.property(\"Timestamp\");",
							"});",
							"//для валюты",
							"pm.test(\"Проверка правильности данных\", function () {",
							"    var jsonData = pm.response.json(); ",
							"    pm.expect(jsonData.Valute.KZT).to.eql({",
							"         \"ID\": \"R01335\",",
							"            \"NumCode\": \"398\",",
							"            \"CharCode\": \"KZT\",",
							"            \"Nominal\": 100,",
							"            \"Name\": \"Казахстанских тенге\",",
							"            \"Value\": 20.1082,",
							"            \"Previous\": 20.2544",
							"    });",
							"});",
							"",
							"",
							"",
							"//для ошибки",
							"// Проверка статуса кода",
							"pm.test(\"Статус код должен быть 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"// Проверка наличия поля \"error\" и его значения",
							"pm.test(\"Поле 'error' должно присутствовать и иметь значение 'Not found'\", function () {",
							"    pm.response.to.have.jsonBody(\"error\", \"Not found\");",
							"});",
							"",
							"// Проверка наличия поля \"code\" и его значения",
							"pm.test(\"Поле 'code' должно присутствовать и иметь значение 404\", function () {",
							"    pm.response.to.have.jsonBody(\"code\", 404);",
							"});",
							"",
							"// Проверка наличия поля \"explanation\"",
							"pm.test(\"Поле 'explanation' должно присутствовать\", function () {",
							"    pm.response.to.have.jsonBody(\"explanation\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://www.cbr-xml-daily.ru/daily_json.js",
					"protocol": "https",
					"host": [
						"www",
						"cbr-xml-daily",
						"ru"
					],
					"path": [
						"daily_json.js"
					]
				}
			},
			"response": []
		},
		{
			"name": "other",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Подсоединение выполнено', function () {",
							"    pm.response.to.be.ok;",
							"})",
							"",
							"pm.test('Статус 200', function () {",
							"    pm.response.to.have.status(200);",
							"})",
							"",
							"pm.test('Ответ имеет формат в JSON', function () {",
							"    pm.response.to.have.jsonBody();",
							"})",
							"",
							"pm.test('Ответ имеет формат в XML', function () {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/xml');",
							"    pm.expect(pm.responseBody).to.include('<?xml');",
							"})",
							"",
							"pm.test('Должна быть информация о курсах для каждой валюты', function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('Valute');",
							"    var valute = jsonData.Valute;",
							"    for (var currency in valute) {",
							"        pm.expect(valute[currency]).to.have.property('ID');",
							"        pm.expect(valute[currency]).to.have.property('NumCode');",
							"        pm.expect(valute[currency]).to.have.property('CharCode');",
							"        pm.expect(valute[currency]).to.have.property('Nominal');",
							"        pm.expect(valute[currency]).to.have.property('Name');",
							"        pm.expect(valute[currency]).to.have.property('Value');",
							"        pm.expect(valute[currency]).to.have.property('Previous');",
							"    }",
							"})",
							"",
							"pm.test('Проверка наличия полей', function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('Date');",
							"    pm.expect(jsonData).to.have.property('PreviousDate');",
							"    pm.expect(jsonData).to.have.property('PreviousURL');",
							"    pm.expect(jsonData).to.have.property('Timestamp');",
							"})",
							"",
							"pm.test(\"Проверка правильности данных\", function () {",
							"    var jsonData = pm.response.json(); ",
							"    pm.expect(jsonData.Valute.KZT).to.eql({",
							"         \"ID\": \"R01335\",",
							"            \"NumCode\": \"398\",",
							"            \"CharCode\": \"KZT\",",
							"            \"Nominal\": 100,",
							"            \"Name\": \"Казахстанских тенге\",",
							"            \"Value\": pm.expect.any(Number),",
							"            \"Previous\": pm.expect.any(Number)",
							"    });",
							"});",
							"",
							"pm.test('Статус код должен быть 404', function () {",
							"    pm.response.to.have.status(404);",
							"})",
							"",
							"pm.test('Поле \\'error\\' должно присутствовать и иметь значение \\'Not found\\'', function () {",
							"    pm.response.to.have.jsonBody('error', 'Not found');",
							"})",
							"",
							"pm.test('Поле \\'code\\' должно присутствовать и иметь значение 404', function () {",
							"    pm.response.to.have.jsonBody('code', 404);",
							"})",
							"",
							"pm.test('Поле \\'explanation\\' должно присутствовать', function () {",
							"    pm.response.to.have.jsonBody('explanation');",
							"})",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": ""
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test('Подсоединение выполнено', function () {",
					"    pm.response.to.be.ok;",
					"})",
					"",
					"pm.test('Статус 200', function () {",
					"    pm.response.to.have.status(200);",
					"})",
					"",
					"pm.test('Ответ имеет формат в JSON', function () {",
					"    pm.response.to.have.jsonBody();",
					"})",
					"",
					"pm.test('Ответ имеет формат в XML', function () {",
					"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/xml');",
					"    pm.expect(pm.responseBody).to.include('<?xml');",
					"})",
					"",
					"pm.test('Должна быть информация о курсах для каждой валюты', function () {",
					"    var jsonData = pm.response.json();",
					"    pm.expect(jsonData).to.have.property('Valute');",
					"    var valute = jsonData.Valute;",
					"    for (var currency in valute) {",
					"        pm.expect(valute[currency]).to.have.property('ID');",
					"        pm.expect(valute[currency]).to.have.property('NumCode');",
					"        pm.expect(valute[currency]).to.have.property('CharCode');",
					"        pm.expect(valute[currency]).to.have.property('Nominal');",
					"        pm.expect(valute[currency]).to.have.property('Name');",
					"        pm.expect(valute[currency]).to.have.property('Value');",
					"        pm.expect(valute[currency]).to.have.property('Previous');",
					"    }",
					"})",
					"pm.environment.get(\"variable_key\");",
					"",
					"pm.test('Проверка наличия полей', function () {",
					"    var jsonData = pm.response.json();",
					"    pm.expect(jsonData).to.have.property('Date');",
					"    pm.expect(jsonData).to.have.property('PreviousDate');",
					"    pm.expect(jsonData).to.have.property('PreviousURL');",
					"    pm.expect(jsonData).to.have.property('Timestamp');",
					"})",
					"",
					"",
					"",
					"pm.test(\"Проверка правильности данных для казахстанских тенге\", function () {",
					"    var jsonData = pm.response.json(); ",
					"",
					"    // Проверка корректности данных для казахстанских тенге",
					"    pm.expect(jsonData.Valute.KZT).to.eql({",
					"        \"ID\": \"R01335\",",
					"        \"NumCode\": \"398\",",
					"        \"CharCode\": \"KZT\",",
					"        \"Nominal\": 100,",
					"        \"Name\": \"Казахстанских тенге\",",
					"        \"Value\": jsonData.Valute.KZT.Value,",
					"        \"Previous\": jsonData.Valute.KZT.Previous",
					"    });",
					"});",
					"",
					"",
					"pm.test('Статус код должен быть 404', function () {",
					"    pm.response.to.have.status(404);",
					"})",
					"",
					"pm.test('Поле \\'error\\' должно присутствовать и иметь значение \\'Not found\\'', function () {",
					"    pm.response.to.have.jsonBody('error', 'Not found');",
					"})",
					"",
					"pm.test('Поле \\'code\\' должно присутствовать и иметь значение 404', function () {",
					"    pm.response.to.have.jsonBody('code', 404);",
					"})",
					"",
					"pm.test('Поле \\'explanation\\' должно присутствовать', function () {",
					"    pm.response.to.have.jsonBody('explanation');",
					"})",
					"",
					""
				]
			}
		}
	]
}